-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from ParGrammar.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pDir -> Dir                                 (0)
	%start_pListStm -> ListStm                         (1)
	%start_pProgram -> Program                         (2)
	%start_pFunc -> Func                               (3)
	%start_pSeq -> Seq                                 (4)
	%start_pType -> Type                               (5)
	%start_pStm -> Stm                                 (6)
	%start_pNS -> NS                                   (7)
	Ident -> L_ident                                   (8)
	Integer -> L_integ                                 (9)
	String -> L_quoted                                 (10)
	Dir -> '#include' '<' Ident '>'                    (11)
	ListStm ->                                         (12)
	ListStm -> ListStm Stm                             (13)
	Program -> Func                                    (14)
	Func -> Type Ident '()' Seq                        (15)
	Seq -> '{' ListStm '}'                             (16)
	Type -> 'int'                                      (17)
	Stm -> 'return' Integer ';'                        (18)
	Stm -> NS '<<' String '<<' NS ';'                  (19)
	NS -> Ident '::' Ident                             (20)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'#include'     { PT _ (TS _ 1) }
	'()'           { PT _ (TS _ 2) }
	'::'           { PT _ (TS _ 3) }
	';'            { PT _ (TS _ 4) }
	'<'            { PT _ (TS _ 5) }
	'<<'           { PT _ (TS _ 6) }
	'>'            { PT _ (TS _ 7) }
	'int'          { PT _ (TS _ 8) }
	'return'       { PT _ (TS _ 9) }
	'{'            { PT _ (TS _ 10) }
	'}'            { PT _ (TS _ 11) }
	L_ident        { PT _ (TV $$) }
	L_integ        { PT _ (TI $$) }
	L_quoted       { PT _ (TL $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pDir     rule  0
	%start_pListStm rule  1
	%start_pProgram rule  2
	%start_pFunc    rule  3
	%start_pSeq     rule  4
	%start_pType    rule  5
	%start_pStm     rule  6
	%start_pNS      rule  7
	Ident           rule  8
	Integer         rule  9
	String          rule  10
	Dir             rule  11
	ListStm         rules 12, 13
	Program         rule  14
	Func            rule  15
	Seq             rule  16
	Type            rule  17
	Stm             rules 18, 19
	NS              rule  20

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'#include'     shift, and enter state 25

	Dir            goto state 24

State 1


	'return'       reduce using rule 12
	L_ident        reduce using rule 12
	%eof           reduce using rule 12

	ListStm        goto state 23

State 2


	'int'          shift, and enter state 16

	Program        goto state 21
	Func           goto state 22
	Type           goto state 20

State 3


	'int'          shift, and enter state 16

	Func           goto state 19
	Type           goto state 20

State 4


	'{'            shift, and enter state 18

	Seq            goto state 17

State 5


	'int'          shift, and enter state 16

	Type           goto state 15

State 6


	'return'       shift, and enter state 14
	L_ident        shift, and enter state 9

	Ident          goto state 10
	Stm            goto state 12
	NS             goto state 13

State 7


	L_ident        shift, and enter state 9

	Ident          goto state 10
	NS             goto state 11

State 8


	L_ident        shift, and enter state 9


State 9

	Ident -> L_ident .                                  (rule 8)

	'()'           reduce using rule 8
	'::'           reduce using rule 8
	';'            reduce using rule 8
	'<<'           reduce using rule 8
	'>'            reduce using rule 8
	%eof           reduce using rule 8


State 10

	NS -> Ident . '::' Ident                            (rule 20)

	'::'           shift, and enter state 33


State 11

	%start_pNS -> NS .                                  (rule 7)

	%eof           accept


State 12

	%start_pStm -> Stm .                                (rule 6)

	%eof           accept


State 13

	Stm -> NS . '<<' String '<<' NS ';'                 (rule 19)

	'<<'           shift, and enter state 32


State 14

	Stm -> 'return' . Integer ';'                       (rule 18)

	L_integ        shift, and enter state 31

	Integer        goto state 30

State 15

	%start_pType -> Type .                              (rule 5)

	%eof           accept


State 16

	Type -> 'int' .                                     (rule 17)

	L_ident        reduce using rule 17
	%eof           reduce using rule 17


State 17

	%start_pSeq -> Seq .                                (rule 4)

	%eof           accept


State 18

	Seq -> '{' . ListStm '}'                            (rule 16)

	'return'       reduce using rule 12
	'}'            reduce using rule 12
	L_ident        reduce using rule 12

	ListStm        goto state 29

State 19

	%start_pFunc -> Func .                              (rule 3)

	%eof           accept


State 20

	Func -> Type . Ident '()' Seq                       (rule 15)

	L_ident        shift, and enter state 9

	Ident          goto state 28

State 21

	%start_pProgram -> Program .                        (rule 2)

	%eof           accept


State 22

	Program -> Func .                                   (rule 14)

	%eof           reduce using rule 14


State 23

	%start_pListStm -> ListStm .                        (rule 1)
	ListStm -> ListStm . Stm                            (rule 13)

	'return'       shift, and enter state 14
	L_ident        shift, and enter state 9
	%eof           accept

	Ident          goto state 10
	Stm            goto state 27
	NS             goto state 13

State 24

	%start_pDir -> Dir .                                (rule 0)

	%eof           accept


State 25

	Dir -> '#include' . '<' Ident '>'                   (rule 11)

	'<'            shift, and enter state 26


State 26

	Dir -> '#include' '<' . Ident '>'                   (rule 11)

	L_ident        shift, and enter state 9

	Ident          goto state 40

State 27

	ListStm -> ListStm Stm .                            (rule 13)

	'return'       reduce using rule 13
	'}'            reduce using rule 13
	L_ident        reduce using rule 13
	%eof           reduce using rule 13


State 28

	Func -> Type Ident . '()' Seq                       (rule 15)

	'()'           shift, and enter state 39


State 29

	ListStm -> ListStm . Stm                            (rule 13)
	Seq -> '{' ListStm . '}'                            (rule 16)

	'return'       shift, and enter state 14
	'}'            shift, and enter state 38
	L_ident        shift, and enter state 9

	Ident          goto state 10
	Stm            goto state 27
	NS             goto state 13

State 30

	Stm -> 'return' Integer . ';'                       (rule 18)

	';'            shift, and enter state 37


State 31

	Integer -> L_integ .                                (rule 9)

	';'            reduce using rule 9


State 32

	Stm -> NS '<<' . String '<<' NS ';'                 (rule 19)

	L_quoted       shift, and enter state 36

	String         goto state 35

State 33

	NS -> Ident '::' . Ident                            (rule 20)

	L_ident        shift, and enter state 9

	Ident          goto state 34

State 34

	NS -> Ident '::' Ident .                            (rule 20)

	';'            reduce using rule 20
	'<<'           reduce using rule 20
	%eof           reduce using rule 20


State 35

	Stm -> NS '<<' String . '<<' NS ';'                 (rule 19)

	'<<'           shift, and enter state 43


State 36

	String -> L_quoted .                                (rule 10)

	'<<'           reduce using rule 10


State 37

	Stm -> 'return' Integer ';' .                       (rule 18)

	'return'       reduce using rule 18
	'}'            reduce using rule 18
	L_ident        reduce using rule 18
	%eof           reduce using rule 18


State 38

	Seq -> '{' ListStm '}' .                            (rule 16)

	%eof           reduce using rule 16


State 39

	Func -> Type Ident '()' . Seq                       (rule 15)

	'{'            shift, and enter state 18

	Seq            goto state 42

State 40

	Dir -> '#include' '<' Ident . '>'                   (rule 11)

	'>'            shift, and enter state 41


State 41

	Dir -> '#include' '<' Ident '>' .                   (rule 11)

	%eof           reduce using rule 11


State 42

	Func -> Type Ident '()' Seq .                       (rule 15)

	%eof           reduce using rule 15


State 43

	Stm -> NS '<<' String '<<' . NS ';'                 (rule 19)

	L_ident        shift, and enter state 9

	Ident          goto state 10
	NS             goto state 44

State 44

	Stm -> NS '<<' String '<<' NS . ';'                 (rule 19)

	';'            shift, and enter state 45


State 45

	Stm -> NS '<<' String '<<' NS ';' .                 (rule 19)

	'return'       reduce using rule 19
	'}'            reduce using rule 19
	L_ident        reduce using rule 19
	%eof           reduce using rule 19


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 21
Number of terminals: 14
Number of non-terminals: 19
Number of states: 46
