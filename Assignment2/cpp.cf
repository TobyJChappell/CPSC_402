PDefs.   Program ::= [Def] ;

DFunc.    Def ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;
DDecl.		Def ::= Type [Id] ";" ;
DUse.	    Def ::= "using" Type ";" ;
--DProt.	    Def ::= Type Id "(" [Type] ")" ";" ;

terminator Def "" ;

ADecl.   Arg    ::= Type Id ;

separator Arg "," ;

SExp.        Stm ::= Exp ";" ;
SDecls.      Stm ::= Type [Id] ";" ;
SInit.       Stm ::= Type Id "=" Exp ";" ;
SReturn.     Stm ::= "return" Exp ";" ;
SReturnVoid. Stm ::= "return" ";" ;
SWhile.      Stm ::= "while" "(" Exp ")" Stm ;
SBlock.      Stm ::= "{" [Stm] "}" ;
SIf.         Stm ::= "if" "(" Exp ")" Stm ;
SIfElse.     Stm ::= "if" "(" Exp ")" Stm "else" Stm ;
SMethod.	 	 Stm ::= Type Id "(" [Arg] ")" "{" Stm "}" ;
SThrow.	     Stm ::= "throw" Id "(" Exp ")" ";" ;

terminator Stm "" ;

TId. 	     Type5 ::= Id ;
TIds.		   Type5 ::= Id "::" Id ;
TBrac. 	   Type4 ::= Type4 "<" [Type5] ">" ;
TNs. 	     Type4 ::= Type4 "::" Type5 ;
TCons.	   Type3 ::= "const" Type4 ;
TAlias.    Type3 ::= "typedef" Type4 ;
TAmp.      Type2 ::= Type3 "&" ;

separator Type "," ;
separator Type5 "," ;
coercions Type 5 ;

ETrue.   Exp19  ::= "true" ;
EFalse.  Exp19  ::= "false" ;
EInt.    Exp19  ::= Integer ;
EDouble. Exp19  ::= Double ;
EString. Exp19  ::= String ;
EId.     Exp19  ::= Id ;
EIds.    Exp19  ::= Id "::" Id ;

ENs. 	   Exp18  ::= Exp18 "::" Exp19 ;
EDot. 	 Exp18  ::= Exp18 "." Exp19 ;

EArray.  Exp17  ::= Exp18 "[" Exp11 "]" ;

EPIncr.  Exp16  ::= Exp17 "++" ;
EPDecr.  Exp16  ::= Exp17 "--" ;

EIncr.   Exp15  ::= "++" Exp16 ;
EDecr.   Exp15  ::= "--" Exp16 ;

EFunc.	 Exp15 ::= Exp17 "(" [Exp5] ")" ;

ENot.    Exp13  ::= "!" Exp14 ;

ETimes.  Exp12  ::= Exp12 "*"  Exp13 ;
EDiv.    Exp12  ::= Exp12 "/"  Exp13 ;
EMod.    Exp12  ::= Exp12 "%"  Exp13 ;
EPlus.   Exp11  ::= Exp11 "+"  Exp12 ;
EMinus.  Exp11  ::= Exp11 "-"  Exp12 ;
ELt.     Exp9   ::= Exp9  "<"  Exp10 ;
EGt.     Exp9   ::= Exp9  ">"  Exp10 ;
ELtEq.   Exp9   ::= Exp9  "<=" Exp10 ;
EGtEq.   Exp9   ::= Exp9  ">=" Exp10 ;
EEq.     Exp8   ::= Exp8  "==" Exp9 ;
ENEq.    Exp8   ::= Exp8  "!=" Exp9 ;

EAnd.    Exp7   ::= Exp7  "&&" Exp8 ;
EOr.     Exp6   ::= Exp6  "||" Exp7 ;
EAss.    Exp5   ::= Exp6 "=" Exp5 ;

ECout.   Exp3 ::= Exp3 "<<" [Exp4] ;

ECin. 	 Exp2 ::= Exp2 ">>" Exp3 ;

EIf.     Exp ::= Exp2 "?" Exp2 ":" Exp2 ;

internal ETyped. Exp18 ::= "(" Exp ":" Type ")" ;

coercions Exp 19 ;

separator Exp "," ;

separator Exp4 "" ;

separator Exp5 "," ;

token Id (letter (letter | digit | '_')*) ;

separator nonempty Id "," ;

comment "#" ;
comment "//" ;
comment "/*" "*/" ;
