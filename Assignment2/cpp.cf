PDefs.   Program ::= [Def] ;

DFun.    Def    ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;

terminator Def "" ;

ADecl.   Arg    ::= Type Id ;

separator Arg "," ;

SExp.        Stm ::= Exp ";" ;
SDecls.      Stm ::= Type [Id] ";" ;
SInit.       Stm ::= Type Id "=" Exp ";" ;
SReturn.     Stm ::= "return" Exp ";" ;
SReturnVoid. Stm ::= "return" ";" ;
SWhile.      Stm ::= "while" "(" Exp ")" Stm ;
SBlock.      Stm ::= "{" [Stm] "}" ;
SIf.     		 Stm ::= "if" "(" Exp ")" Stm ;
SIfElse.     Stm ::= "if" "(" Exp ")" Stm "else" Stm ;
SFunc.	     Stm ::= Mem "(" [Exp] ")" ";" ;
SMethod.	   Stm ::= Type Id "(" [Arg] ")" "{" Stm "}" ;
SThrow.			 Stm ::= "throw" Id "(" Exp ")" ";" ;

terminator Stm "" ;

MId. 				 Mem3 ::= Id ;
MIds.				 Mem2 ::= Id "." Id ;
MCall.			 Mem2 ::= Mem2 "." Mem3 ;

coercions Mem 3 ;

TId. 	     Type5 ::= Id ;
TIds.			 Type5 ::= Id "::" Id ;
TBrac. 	   Type4 ::= Type4 "<" Type5 ">" ;
TNs. 	     Type4 ::= Type4 "::" Type5;
TCons.	   Type3 ::= "const" Type4 ;
TAlias.    Type3 ::= "typedef" Type4 ;
TAmp.      Type2 ::= Type3 "&" ;

separator Type "," ;
coercions Type 5 ;

EArray.  Exp16  ::= Mem "[" Exp "]" ;
EFunc.	 Exp16 ::= Mem "(" [Exp] ")" ;

ETrue.   Exp15  ::= "true" ;
EFalse.  Exp15  ::= "false" ;
EInt.    Exp15  ::= Integer ;
EDouble. Exp15  ::= Double ;
EString. Exp15  ::= String ;
EId.     Exp15  ::= Id ;
ENs.     Exp15  ::= Id "::" Id ;

ECout.   Exp14 ::= Exp14 "<<" [Exp15] ;

EPIncr.  Exp14  ::= Exp15 "++" ;
EPDecr.  Exp14  ::= Exp15 "--" ;

ECin. 	 Exp13 ::= Exp13 ">>" Exp14 ;

EIncr.   Exp13  ::= "++" Exp14 ;
EDecr.   Exp13  ::= "--" Exp14 ;

ETimes.  Exp12  ::= Exp12 "*"  Exp13 ;
EDiv.    Exp12  ::= Exp12 "/"  Exp13 ;
EMod.    Exp12  ::= Exp12 "%"  Exp13 ;
EPlus.   Exp11  ::= Exp11 "+"  Exp12 ;
EMinus.  Exp11  ::= Exp11 "-"  Exp12 ;
ELt.     Exp9   ::= Exp9  "<"  Exp10 ;
EGt.     Exp9   ::= Exp9  ">"  Exp10 ;
ELtEq.   Exp9   ::= Exp9  "<=" Exp10 ;
EGtEq.   Exp9   ::= Exp9  ">=" Exp10 ;
EEq.     Exp8   ::= Exp8  "==" Exp9 ;
ENEq.    Exp8   ::= Exp8  "!=" Exp9 ;
EAnd.    Exp4   ::= Exp4  "&&" Exp5 ;
EOr.     Exp3   ::= Exp3  "||" Exp4 ;
EAss.    Exp2   ::= Exp3 "=" Exp2 ;
EIf.     Exp ::= Exp2 "?" Exp2 ":" Exp2 ;

internal ETyped. Exp16 ::= "(" Exp ":" Type ")" ;

coercions Exp 16 ;

separator Exp "," ;

separator Exp14 "," ;

separator Exp15 "" ;

token Id (letter (letter | digit | '_')*) ;

separator nonempty Id "," ;

comment "#" ;
comment "//" ;
comment "/*" "*/" ;
comment "using" ;
