PDefs.   Program ::= [Def] ;

DFunc.      Def ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;
DDecl.	    Def ::= Type [Id] ";" ;
DUse.	    Def ::= "using" Type ";" ;
--DProt.    Def ::= Type Id "(" [Type] ")" ";" ;

terminator Def "" ;

ADecl.   Arg    ::= Type Id ;

separator Arg "," ;

SExp.        Stm ::= Exp ";" ;
SDecls.      Stm ::= Type [Id] ";" ;
SInit.       Stm ::= Type Id "=" Exp ";" ;
SReturn.     Stm ::= "return" Exp ";" ;
SReturnVoid. Stm ::= "return" ";" ;
SWhile.      Stm ::= "while" "(" Exp ")" Stm ;
SBlock.      Stm ::= "{" [Stm] "}" ;
SIf.         Stm ::= "if" "(" Exp ")" Stm ;
SIfElse.     Stm ::= "if" "(" Exp ")" Stm "else" Stm ;
SMethod.     Stm ::= Type Id "(" [Arg] ")" "{" Stm "}" ;

terminator Stm "" ;

TId. 	   Type5 ::= Id ;
TIds.	   Type5 ::= Id "::" Id ;
TBrac. 	   Type4 ::= Type4 "<" [Type5] ">" ;
TNs. 	   Type4 ::= Type4 "::" Type5 ;
TCons.	   Type3 ::= "const" Type4 ;
TAlias.    Type3 ::= "typedef" Type4 ;
TAmp.      Type2 ::= Type3 "&" ;

separator Type "," ;
separator Type5 "," ;
coercions Type 5 ;

ETrue.   Exp16  ::= "true" ;
EFalse.  Exp16  ::= "false" ;
EInt.    Exp16  ::= Integer ;
EDouble. Exp16  ::= Double ;
EString. Exp16  ::= String ;
EId.     Exp16  ::= Id ;
EIds.    Exp16  ::= Id "::" Id ;

ENs. 	 Exp15  ::= Exp15 "::" Exp16 ;
EArray.  Exp15  ::= Exp15 "[" Exp11 "]" ;
EFunc.	 Exp15  ::= Exp16 "(" [Exp2] ")" ;

EDot. 	 Exp14  ::= Exp14 "." Exp15 ;
EPIncr.  Exp14  ::= Exp15 "++" ;
EPDecr.  Exp14  ::= Exp15 "--" ;
EDeref.  Exp14  ::= "*" Exp15 ;

EIncr.   Exp13  ::= "++" Exp14 ;
EDecr.   Exp13  ::= "--" Exp14 ;
ENot.    Exp13  ::= "!" Exp14 ;

ETimes.  Exp12  ::= Exp12 "*"  Exp13 ;
EDiv.    Exp12  ::= Exp12 "/"  Exp13 ;
EMod.    Exp12  ::= Exp12 "%"  Exp13 ;

EPlus.   Exp11  ::= Exp11 "+"  Exp12 ;
EMinus.  Exp11  ::= Exp11 "-"  Exp12 ;

ECout.   Exp10 ::= Exp10 "<<" [Exp11] ;
ECin. 	 Exp10 ::= Exp10 ">>" Exp11 ;

ELt.     Exp9   ::= Exp9  "<"  Exp10 ;
EGt.     Exp9   ::= Exp9  ">"  Exp10 ;
ELtEq.   Exp9   ::= Exp9  "<=" Exp10 ;
EGtEq.   Exp9   ::= Exp9  ">=" Exp10 ;

EEq.     Exp8   ::= Exp8  "==" Exp9 ;
ENEq.    Exp8   ::= Exp8  "!=" Exp9 ;

EAnd.    Exp4   ::= Exp4  "&&" Exp5 ;

EOr.     Exp3   ::= Exp3  "||" Exp4 ;

EAss.    Exp2   ::= Exp2 "=" Exp3 ;

EIf.     Exp2 ::= Exp2 "?" Exp2 ":" Exp2 ;

EThrow.  Exp1  ::= "throw" Exp2 ;

internal ETyped. Exp16 ::= "(" Exp ":" Type ")" ;

coercions Exp 16 ;

separator Exp "," ;

separator Exp2 "," ;

separator Exp11 "" ;

token Id (letter (letter | digit | '_')*) ;

separator nonempty Id "," ;

comment "#" ;
comment "//" ;
comment "/*" "*/" ;
