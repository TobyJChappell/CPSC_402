-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParGrammar where
import AbsGrammar
import LexGrammar
import ErrM

}

%name pDir Dir
%name pListStm ListStm
%name pProgram Program
%name pFunc Func
%name pSeq Seq
%name pType Type
%name pStm Stm
%name pNS NS
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '#include' { PT _ (TS _ 1) }
  '()' { PT _ (TS _ 2) }
  '::' { PT _ (TS _ 3) }
  ';' { PT _ (TS _ 4) }
  '<' { PT _ (TS _ 5) }
  '<<' { PT _ (TS _ 6) }
  '>' { PT _ (TS _ 7) }
  'int' { PT _ (TS _ 8) }
  'return' { PT _ (TS _ 9) }
  '{' { PT _ (TS _ 10) }
  '}' { PT _ (TS _ 11) }
  L_ident  { PT _ (TV $$) }
  L_integ  { PT _ (TI $$) }
  L_quoted { PT _ (TL $$) }

%%

Ident   :: { Ident }
Ident    : L_ident  { Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read ( $1)) :: Integer }

String  :: { String }
String   : L_quoted {  $1 }

Dir :: { Dir }
Dir : '#include' '<' Ident '>' { AbsGrammar.PDir $3 }
ListStm :: { [Stm] }
ListStm : {- empty -} { [] } | ListStm Stm { flip (:) $1 $2 }
Program :: { Program }
Program : Func { AbsGrammar.Prog $1 }
Func :: { Func }
Func : Type Ident '()' Seq { AbsGrammar.Function $1 $2 $4 }
Seq :: { Seq }
Seq : '{' ListStm '}' { AbsGrammar.Sequence (reverse $2) }
Type :: { Type }
Type : 'int' { AbsGrammar.TInt }
Stm :: { Stm }
Stm : 'return' Integer ';' { AbsGrammar.SReturn $2 }
    | NS '<<' String '<<' NS ';' { AbsGrammar.SPrint $1 $3 $5 }
NS :: { NS }
NS : Ident '::' Ident { AbsGrammar.Namespace $1 $3 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}

