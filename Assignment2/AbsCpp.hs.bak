-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module AbsCpp where

newtype Id = Id String
  deriving (Eq, Ord, Show, Read)

data Program = PDefs [Def]
  deriving (Eq, Ord, Show, Read)

data Def = DFunc Type Id [Arg] [Stm] | DDecl Type [Id] | DUse Type
  deriving (Eq, Ord, Show, Read)

data Arg = ADecl Type Id
  deriving (Eq, Ord, Show, Read)

data Stm
    = SExp Exp
    | SDecls Type [Id]
    | SInit Type Id Exp
    | SReturn Exp
    | SReturnVoid
    | SWhile Exp Stm
    | SBlock [Stm]
    | SIf Exp Stm
    | SIfElse Exp Stm Stm
    | SFunc Mem [Exp]
    | SMethod Type Id [Arg] Stm
    | SThrow Id Exp
  deriving (Eq, Ord, Show, Read)

data Mem = MId Id | MIds Id Id | MCall Mem Mem
  deriving (Eq, Ord, Show, Read)

data Type
    = TId Id
    | TIds Id Id
    | TBrac Type [Type]
    | TNs Type Type
    | TCons Type
    | TAlias Type
    | TAmp Type
  deriving (Eq, Ord, Show, Read)

data Exp
    = ETrue
    | EFalse
    | EInt Integer
    | EDouble Double
    | EString String
    | EId Id
    | EIds Id Id
    | EDot Id Id
    | ENs Exp Exp
    | EMem Exp Exp
    | EArray Mem Exp
    | EPIncr Exp
    | EPDecr Exp
    | EIncr Exp
    | EDecr Exp
    | EFunc Mem [Exp]
    | ENot Exp
    | ETimes Exp Exp
    | EDiv Exp Exp
    | EMod Exp Exp
    | EPlus Exp Exp
    | EMinus Exp Exp
    | ELt Exp Exp
    | EGt Exp Exp
    | ELtEq Exp Exp
    | EGtEq Exp Exp
    | EEq Exp Exp
    | ENEq Exp Exp
    | EAnd Exp Exp
    | EOr Exp Exp
    | EAss Exp Exp
    | ECout Exp [Exp]
    | ECin Exp Exp
    | EIf Exp Exp Exp
    | ETyped Exp Type
  deriving (Eq, Ord, Show, Read)

