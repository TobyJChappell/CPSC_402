module SkelGrammar where

-- Haskell module generated by the BNF converter

import AbsGrammar
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transDir :: Dir -> Result
transDir x = case x of
  PDir ident -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Prog func -> failure x
transFunc :: Func -> Result
transFunc x = case x of
  Function type_ ident seq -> failure x
transSeq :: Seq -> Result
transSeq x = case x of
  Sequence stms -> failure x
transType :: Type -> Result
transType x = case x of
  TInt -> failure x
transStm :: Stm -> Result
transStm x = case x of
  SReturn integer -> failure x
  SPrint ns1 string ns2 -> failure x
transNS :: NS -> Result
transNS x = case x of
  Namespace ident1 ident2 -> failure x

