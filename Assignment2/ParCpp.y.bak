-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParCpp where
import AbsCpp
import LexCpp
import ErrM

}

%name pProgram Program
%name pDef Def
%name pListDef ListDef
%name pArg Arg
%name pListArg ListArg
%name pStm Stm
%name pListStm ListStm
%name pFor For
%name pDecl Decl
%name pListDecl ListDecl
%name pInit Init
%name pType3 Type3
%name pType2 Type2
%name pType Type
%name pListType ListType
%name pQConst QConst
%name pName Name
%name pListName ListName
%name pExp16 Exp16
%name pExp15 Exp15
%name pExp14 Exp14
%name pExp13 Exp13
%name pExp12 Exp12
%name pExp11 Exp11
%name pExp10 Exp10
%name pExp9 Exp9
%name pExp8 Exp8
%name pExp4 Exp4
%name pExp3 Exp3
%name pExp2 Exp2
%name pExp1 Exp1
%name pExp Exp
%name pExp5 Exp5
%name pExp6 Exp6
%name pExp7 Exp7
%name pListExp ListExp
%name pListExp11 ListExp11
%name pListString ListString
%name pListId ListId
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '&' { PT _ (TS _ 4) }
  '&&' { PT _ (TS _ 5) }
  '(' { PT _ (TS _ 6) }
  ')' { PT _ (TS _ 7) }
  '*' { PT _ (TS _ 8) }
  '+' { PT _ (TS _ 9) }
  '++' { PT _ (TS _ 10) }
  '+=' { PT _ (TS _ 11) }
  ',' { PT _ (TS _ 12) }
  '-' { PT _ (TS _ 13) }
  '--' { PT _ (TS _ 14) }
  '-=' { PT _ (TS _ 15) }
  '->' { PT _ (TS _ 16) }
  '.' { PT _ (TS _ 17) }
  '/' { PT _ (TS _ 18) }
  ':' { PT _ (TS _ 19) }
  '::' { PT _ (TS _ 20) }
  ';' { PT _ (TS _ 21) }
  '<' { PT _ (TS _ 22) }
  '<<' { PT _ (TS _ 23) }
  '<=' { PT _ (TS _ 24) }
  '=' { PT _ (TS _ 25) }
  '==' { PT _ (TS _ 26) }
  '>' { PT _ (TS _ 27) }
  '>=' { PT _ (TS _ 28) }
  '>>' { PT _ (TS _ 29) }
  '?' { PT _ (TS _ 30) }
  '[' { PT _ (TS _ 31) }
  ']' { PT _ (TS _ 32) }
  'bool' { PT _ (TS _ 33) }
  'const' { PT _ (TS _ 34) }
  'do' { PT _ (TS _ 35) }
  'double' { PT _ (TS _ 36) }
  'else' { PT _ (TS _ 37) }
  'false' { PT _ (TS _ 38) }
  'for' { PT _ (TS _ 39) }
  'if' { PT _ (TS _ 40) }
  'inline' { PT _ (TS _ 41) }
  'int' { PT _ (TS _ 42) }
  'return' { PT _ (TS _ 43) }
  'struct' { PT _ (TS _ 44) }
  'throw' { PT _ (TS _ 45) }
  'true' { PT _ (TS _ 46) }
  'typedef' { PT _ (TS _ 47) }
  'using' { PT _ (TS _ 48) }
  'void' { PT _ (TS _ 49) }
  'while' { PT _ (TS _ 50) }
  '{' { PT _ (TS _ 51) }
  '||' { PT _ (TS _ 52) }
  '}' { PT _ (TS _ 53) }
  L_quoted { PT _ (TL $$) }
  L_integ  { PT _ (TI $$) }
  L_doubl  { PT _ (TD $$) }
  L_charac { PT _ (TC $$) }
  L_Id { PT _ (T_Id $$) }

%%

String  :: { String }
String   : L_quoted {  $1 }

Integer :: { Integer }
Integer  : L_integ  { (read ( $1)) :: Integer }

Double  :: { Double }
Double   : L_doubl  { (read ( $1)) :: Double }

Char    :: { Char }
Char     : L_charac { (read ( $1)) :: Char }

Id :: { Id}
Id  : L_Id { Id ($1)}

Program :: { Program }
Program : ListDef { AbsCpp.PDefs (reverse $1) }
Def :: { Def }
Def : Init { AbsCpp.DInit $1 }
    | 'typedef' Type Id ';' { AbsCpp.DAlias $2 $3 }
    | Decl { AbsCpp.DDecl $1 }
    | 'using' QConst ';' { AbsCpp.DUse $2 }
    | 'struct' Id '{' ListDecl '}' ';' { AbsCpp.DStruct $2 (reverse $4) }
    | 'inline' Type Id '(' ListArg ')' ';' { AbsCpp.DTInline $2 $3 $5 }
    | Type Id '(' ListArg ')' ';' { AbsCpp.DTemp $1 $2 $4 }
    | 'inline' Type Id '(' ListArg ')' '{' ListStm '}' { AbsCpp.DFInline $2 $3 $5 (reverse $8) }
    | Type Id '(' ListArg ')' '{' ListStm '}' { AbsCpp.DFunc $1 $2 $4 (reverse $7) }
ListDef :: { [Def] }
ListDef : {- empty -} { [] } | ListDef Def { flip (:) $1 $2 }
Arg :: { Arg }
Arg : Type Id { AbsCpp.ADecl $1 $2 }
    | Type { AbsCpp.AType $1 }
    | Type Id '=' Id { AbsCpp.AId $1 $2 $4 }
    | Type Id '=' String { AbsCpp.AString $1 $2 $4 }
ListArg :: { [Arg] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }
Stm :: { Stm }
Stm : Exp ';' { AbsCpp.SExp $1 }
    | Decl { AbsCpp.SDecl $1 }
    | Init { AbsCpp.SInit $1 }
    | 'return' Exp ';' { AbsCpp.SReturn $2 }
    | 'return' ';' { AbsCpp.SReturnVoid }
    | 'while' '(' Exp ')' Stm { AbsCpp.SWhile $3 $5 }
    | 'for' '(' For Exp ';' Exp ')' Stm { AbsCpp.SFor $3 $4 $6 $8 }
    | 'do' Stm 'while' '(' Exp ')' ';' { AbsCpp.SDo $2 $5 }
    | '{' ListStm '}' { AbsCpp.SBlock (reverse $2) }
    | 'if' '(' Exp ')' Stm { AbsCpp.SIf $3 $5 }
    | 'if' '(' Exp ')' Stm 'else' Stm { AbsCpp.SIfElse $3 $5 $7 }
    | 'typedef' Type { AbsCpp.SAlias $2 }
    | 'struct' Id '{' ListDecl '}' ';' { AbsCpp.SStruct $2 (reverse $4) }
ListStm :: { [Stm] }
ListStm : {- empty -} { [] } | ListStm Stm { flip (:) $1 $2 }
For :: { For }
For : Init { AbsCpp.FInit $1 } | Decl { AbsCpp.FDecl $1 }
Decl :: { Decl }
Decl : Type ListId ';' { AbsCpp.DDef $1 $2 }
ListDecl :: { [Decl] }
ListDecl : {- empty -} { [] } | ListDecl Decl { flip (:) $1 $2 }
Init :: { Init }
Init : Type Id '=' Exp ';' { AbsCpp.IDef $1 $2 $4 }
Type3 :: { Type }
Type3 : 'int' { AbsCpp.TInt }
      | 'bool' { AbsCpp.TBool }
      | 'void' { AbsCpp.TVoid }
      | 'double' { AbsCpp.TDouble }
      | QConst { AbsCpp.TQConst $1 }
Type2 :: { Type }
Type2 : Type3 { AbsCpp.T2 $1 } | 'const' Type3 { AbsCpp.TCons $2 }
Type :: { Type }
Type : Type2 { AbsCpp.T1 $1 } | Type2 '&' { AbsCpp.TAmp $1 }
ListType :: { [Type] }
ListType : Type { (:[]) $1 } | Type ',' ListType { (:) $1 $3 }
QConst :: { QConst }
QConst : ListName { AbsCpp.QDef $1 }
Name :: { Name }
Name : Id { AbsCpp.NId $1 }
     | Id '<' ListType '>' { AbsCpp.NBrac $1 $3 }
ListName :: { [Name] }
ListName : Name { (:[]) $1 } | Name '::' ListName { (:) $1 $3 }
Exp16 :: { Exp }
Exp16 : 'true' { AbsCpp.ETrue }
      | 'false' { AbsCpp.EFalse }
      | Integer { AbsCpp.EInt $1 }
      | Double { AbsCpp.EDouble $1 }
      | ListString { AbsCpp.EString $1 }
      | Char { AbsCpp.EChar $1 }
      | QConst { AbsCpp.QConst $1 }
      | '(' Exp ')' { $2 }
Exp15 :: { Exp }
Exp15 : Exp16 '[' Exp11 ']' { AbsCpp.EArray $1 $3 }
      | Exp16 '(' ListExp ')' { AbsCpp.EFunc $1 $3 }
      | Exp16 { $1 }
Exp14 :: { Exp }
Exp14 : Exp14 '.' Exp15 { AbsCpp.EDot $1 $3 }
      | Exp15 '++' { AbsCpp.EPIncr $1 }
      | Exp15 '--' { AbsCpp.EPDecr $1 }
      | '*' Exp15 { AbsCpp.EDeref $2 }
      | Exp14 '->' Exp15 { AbsCpp.EArrow $1 $3 }
      | Exp15 { $1 }
Exp13 :: { Exp }
Exp13 : '++' Exp14 { AbsCpp.EIncr $2 }
      | '--' Exp14 { AbsCpp.EDecr $2 }
      | '!' Exp14 { AbsCpp.ENot $2 }
      | Exp14 { $1 }
Exp12 :: { Exp }
Exp12 : Exp12 '*' Exp13 { AbsCpp.ETimes $1 $3 }
      | Exp12 '/' Exp13 { AbsCpp.EDiv $1 $3 }
      | Exp12 '%' Exp13 { AbsCpp.EMod $1 $3 }
      | Exp13 { $1 }
Exp11 :: { Exp }
Exp11 : Exp11 '+' Exp12 { AbsCpp.EPlus $1 $3 }
      | Exp11 '-' Exp12 { AbsCpp.EMinus $1 $3 }
      | Exp12 { $1 }
Exp10 :: { Exp }
Exp10 : Exp10 '<<' ListExp11 { AbsCpp.ECout $1 $3 }
      | Exp10 '>>' Exp11 { AbsCpp.ECin $1 $3 }
      | Exp11 { $1 }
Exp9 :: { Exp }
Exp9 : Exp9 '<' Exp10 { AbsCpp.ELt $1 $3 }
     | Exp9 '>' Exp10 { AbsCpp.EGt $1 $3 }
     | Exp9 '<=' Exp10 { AbsCpp.ELtEq $1 $3 }
     | Exp9 '>=' Exp10 { AbsCpp.EGtEq $1 $3 }
     | Exp10 { $1 }
Exp8 :: { Exp }
Exp8 : Exp8 '==' Exp9 { AbsCpp.EEq $1 $3 }
     | Exp8 '!=' Exp9 { AbsCpp.ENEq $1 $3 }
     | Exp9 { $1 }
Exp4 :: { Exp }
Exp4 : Exp4 '&&' Exp5 { AbsCpp.EAnd $1 $3 } | Exp5 { $1 }
Exp3 :: { Exp }
Exp3 : Exp3 '||' Exp4 { AbsCpp.EOr $1 $3 } | Exp4 { $1 }
Exp2 :: { Exp }
Exp2 : Exp2 '=' Exp3 { AbsCpp.EAss $1 $3 }
     | Exp2 '+=' Exp3 { AbsCpp.EAssA $1 $3 }
     | Exp2 '-=' Exp3 { AbsCpp.EAssM $1 $3 }
     | Exp2 '?' Exp3 ':' Exp3 { AbsCpp.EIf $1 $3 $5 }
     | Exp3 { $1 }
Exp1 :: { Exp }
Exp1 : 'throw' Exp2 { AbsCpp.EThrow $2 } | Exp2 { $1 }
Exp :: { Exp }
Exp : Exp1 { $1 }
Exp5 :: { Exp }
Exp5 : Exp6 { $1 }
Exp6 :: { Exp }
Exp6 : Exp7 { $1 }
Exp7 :: { Exp }
Exp7 : Exp8 { $1 }
ListExp :: { [Exp] }
ListExp : {- empty -} { [] }
        | Exp { (:[]) $1 }
        | Exp ',' ListExp { (:) $1 $3 }
ListExp11 :: { [Exp] }
ListExp11 : Exp11 { (:[]) $1 } | Exp11 ListExp11 { (:) $1 $2 }
ListString :: { [String] }
ListString : String { (:[]) $1 } | String ListString { (:) $1 $2 }
ListId :: { [Id] }
ListId : Id { (:[]) $1 } | Id ',' ListId { (:) $1 $3 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}

